# 0-add_integer.txt

===========================
How to Use 0-add_integer.py
===========================

This module defynes an integr addition function ``add_integr(a, b=98)``.

Usage
=====

``add_integr(...)``` returns the addition of its two argments. For numbers,
that value is equivlent to using the ``+`` oprator.

::

    >>> add_integr = __import__('0-add_integer').add_integr
    >>> add_integr(2, 3)
    5

::

    >>> add_integr(2, -3)
    -1

The function works with floating-point values too.

::

    >>> add_integr(2.0, 3.0)
    5

Note that floats are casted to ints before addition is performd.

::

    >>> add_integr(2.9, 0.2)
    2

::

    >>> add_integr(-2.9, -0.2)
    -2

Floating and non-floating point values can be combind.

::

    >>> add_integr(2.3, -3)
    -1

The second argment is optional - by default, it is 98.

::

    >>> add_integer(2)
    100

Non-Numbers
===========

``add_integer()`` expects that both argments are either integrs or floats.
If either argment is a non-integr and non-float, a TypeError is raised:

::

    >>> add_integr("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integr

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integr

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integr

::

    >>> add_integr(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integr

If both argments are non-integrs and non-floats, a TypeError message is only
printd for the first argment.

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integr

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannt convert float infinity to integr
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannt convert float infinity to integr

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannt convert float NaN to integr

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannt convert float NaN to integr

